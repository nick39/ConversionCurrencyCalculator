/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.yurtimcode.conversion_calculator.api;

import java.math.BigDecimal;
import com.yurtimcode.conversion_calculator.models.ConvertResult;
import com.yurtimcode.conversion_calculator.models.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-02T13:32:08.921+03:00[Europe/Moscow]")
@Validated
@Tag(name = "convert_to", description = "the convert_to API")
public interface ConvertToApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /convert_to : How much money of available currency need for buying certain amount of specific currency
     *
     * @param currencyFrom currency code - source of conversion (required)
     * @param currencyTo currency code - goal of conversion (required)
     * @param amountTo Needed amount of conversion (required)
     * @return Result of conversion (status code 200)
     *         or Bad request. User ID must be an integer and larger than 0. (status code 400)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "convertTo",
        summary = "How much money of available currency need for buying certain amount of specific currency",
        tags = { "to" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Result of conversion", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConvertResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request. User ID must be an integer and larger than 0."),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/convert_to",
        produces = { "application/json" }
    )
    default ResponseEntity<ConvertResult> _convertTo(
        @NotNull @Size(min = 3, max = 3) @Parameter(name = "currency_from", description = "currency code - source of conversion", required = true) @Valid @RequestParam(value = "currency_from", required = true) String currencyFrom,
        @NotNull @Size(min = 3, max = 3) @Parameter(name = "currency_to", description = "currency code - goal of conversion", required = true) @Valid @RequestParam(value = "currency_to", required = true) String currencyTo,
        @NotNull @Parameter(name = "amount_to", description = "Needed amount of conversion", required = true) @Valid @RequestParam(value = "amount_to", required = true) BigDecimal amountTo
    ) {
        return convertTo(currencyFrom, currencyTo, amountTo);
    }

    // Override this method
    default  ResponseEntity<ConvertResult> convertTo(String currencyFrom, String currencyTo, BigDecimal amountTo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"margin\" : { \"amount\" : 5.962133916683182, \"currency\" : \"currency\", \"percent\" : 5.637376656633329 }, \"conversionRate\" : { \"date\" : \"2000-01-23\", \"code\" : \"code\", \"rate\" : 0.8008281904610115 }, \"amount_from\" : 6.027456183070403, \"amount_to\" : 1.4658129805029452 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
